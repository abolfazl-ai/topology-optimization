import numpy as np
from cvxopt import spmatrix, cholmod
from scipy.sparse import csc_matrix


class FEM:

    def __init__(self, mesh, bc):
        self.shape, self.dof, self.indexes = mesh['shape'], mesh['dof'], mesh['indexes']
        self.free, self.force = bc['free_dofs'], bc['force_vector']
        self.k, self.k_tri = Q4_stiffness() if mesh['dim'] == 2 else H8_stiffness()
        self.u = np.zeros(self.dof)

    def solve(self, elasticity):
        ks = ((self.k_tri[np.newaxis]).T * elasticity).flatten(order='F')
        k = csc_matrix((ks, (self.indexes[0], self.indexes[1])),
                       shape=(self.dof, self.dof))[self.free, :][:, self.free].tocoo()
        u, b = np.zeros(self.dof), self.force[self.free]
        k = spmatrix(k.data, k.row.astype(np.int32), k.col.astype(np.int32))
        cholmod.linsolve(k, b)
        u[self.free] = np.array(b)[:, 0]
        self.u = u
        return u


def H8_stiffness(nu=0.3):
    k_tri = (1 / (1 + nu) / (2 * nu - 1) / 144 * (np.array(
        [-32, -6, -6, 8, 6, 6, 10, 6, 3, -4, -6, -3, -4, -3, -6, +10,
         3, 6, 8, 3, 3, 4, -3, -3, -32, -6, -6, -4, -3, 6, 10, 3, +6,
         8, 6, -3, -4, -6, -3, 4, -3, 3, 8, 3, 3, 10, 6, -32, -6, -3,
         -4, -3, -3, 4, -3, -6, -4, 6, 6, 8, 6, 3, 10, 3, 3, 8, 3, 6,
         10, -32, 6, 6, -4, 6, 3, 10, -6, -3, 10, -3, -6, -4, +3, +6,
         4, 3, 3, 8, -3, -3, -32, -6, -6, 8, 6, -6, 10, 3, 3, +4, -3,
         3, -4, -6, -3, 10, 6, -3, 8, 3, -32, +3, -6, -4, +3, -3, +4,
         -6, 3, 10, -6, 6, 8, -3, 6, 10, -3, 3, 8, -32, -6, 6, 8, +6,
         -6, 8, 3, -3, 4, -3, 3, -4, -3, 6, +10, +3, -6, -32, +6, -6,
         -4, 3, 3, 8, -3, 3, 10, -6, -3, -4, 6, -3, 4, 3, -32, 6, +3,
         -4, -3, -3, 8, -3, -6, 10, -6, -6, +8, -6, -3, +10, -32, +6,
         -6, 4, 3, -3, 8, -3, 3, 10, -3, +6, -4, +3, -6, -32, +6, -3,
         10, -6, -3, 8, -3, 3, 4, 3, 3, -4, 6, -32, 3, -6, 10, 3, -3,
         8, 6, -3, 10, 6, -6, 8, -32, -6, 6, 8, 6, -6, 10, 6, -3, -4,
         -6, 3, -32, 6, -6, -4, 3, 6, 10, -3, 6, +8, -6, -32, +6, +3,
         -4, 3, 3, 4, 3, 6, -4, -32, +6, -6, -4, +6, -3, +10, -6, +3,
         -32, 6, -6, 8, -6, -6, +10, -3, -32, -3, +6, -4, -3, +3, +4,
         -32, -6, -6, 8, 6, +6, -32, -6, -6, -4, -3, -32, -6, -3, -4,
         -32, 6, 6, -32, -6, -32]) + nu * np.array(
        [48, 0, 0, 0, -24, -24, -12, 0, -12, 0, 24, 0, 0, 0, +24, -12,
         -12, 0, -12, 0, 0, -12, 12, 12, 48, 0, 24, 0, 0, 0, -12, -12,
         -24, 0, -24, 0, 0, 24, 12, -12, 12, 0, -12, +0, -12, -12, +0,
         +48, 24, 0, 0, 12, 12, -12, 0, +24, +0, -24, -24, 0, +0, -12,
         -12, 0, 0, -12, -12, 0, -12, 48, 0, 0, 0, -24, 0, -12, 0, 12,
         -12, 12, 0, 0, 0, -24, -12, -12, -12, -12, 0, 0, 48, +0, +24,
         +0, -24, 0, -12, -12, -12, -12, 12, 0, 0, 24, 12, -12, 0, +0,
         -12, 0, 48, 0, 24, 0, -12, 12, -12, 0, -12, -12, 24, -24, +0,
         +12, 0, -12, 0, 0, -12, 48, 0, +0, +0, -24, +24, -12, +0, +0,
         -12, 12, -12, 0, 0, -24, -12, -12, 0, 48, 0, +24, +0, +0, +0,
         -12, +0, -12, -12, 0, 0, 0, -24, 12, -12, -12, 48, -24, 0, 0,
         +0, 0, -12, 12, 0, -12, 24, 24, 0, 0, 12, -12, 48, 0, 0, -12,
         -12, 12, -12, 0, 0, -12, 12, 0, 0, 0, 24, 48, 0, +12, -12, 0,
         +0, -12, 0, -12, -12, -12, 0, 0, -24, 48, -12, 0, -12, 0, +0,
         -12, 0, 12, -12, -24, 24, 0, 48, 0, 0, +0, -24, +24, -12, +0,
         +12, 0, 24, 0, 48, 0, 24, 0, 0, 0, -12, 12, -24, 0, +24, +48,
         -24, 0, 0, -12, -12, -12, 0, -24, 0, 48, +0, +0, +0, -24, +0,
         -12, 0, -12, 48, 0, 24, 0, 24, 0, -12, 12, 48, 0, -24, 0, 12,
         -12, -12, 48, 0, 0, 0, -24, -24, 48, 0, 24, 0, 0, 48, 24, +0,
         0, 48, 0, 0, 48, 0, 48])))
    k = np.zeros((24, 24))
    k[np.triu_indices(24)] = k_tri
    k = k + k.T - np.diag(np.diag(k))
    return k, k_tri


def Q4_stiffness(nu=0.3):
    c1 = np.array([12, 3, -6, -3, -6, -3, 0, 3, 12, 3, 0, -3, -6, -3, -6, 12, -3, 0,
                   -3, -6, 3, 12, 3, -6, 3, -6, 12, 3, -6, -3, 12, 3, 0, 12, -3, 12])
    c2 = np.array([-4, 3, -2, 9, 2, -3, 4, -9, -4, -9, 4, -3, 2, 9, -2, -4, -3, 4,
                   9, 2, 3, -4, -9, -2, 3, 2, -4, 3, -2, 9, -4, -9, 4, -4, -3, -4])
    k_tri = 1 / (1 - nu ** 2) / 24 * (c1 + nu * c2)
    k = np.zeros((8, 8))
    k[np.triu_indices(8)] = k_tri
    k = k + k.T - np.diag(np.diag(k))
    return k, k_tri
